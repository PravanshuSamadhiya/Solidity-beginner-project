// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract EventContract{

    address public organiser;
    uint public eventId;

    struct Event{
        string name;
        uint date;
        uint price;
        uint ticketCount;
        uint ticketRemain;
    }
   
   constructor() {
      organiser = msg.sender;
   }
   
   mapping(uint => Event) public events;
   mapping(address => mapping(uint => uint)) public tickets;

   function createEvent(string memory name,uint date, uint price, uint ticketCount) external  {
       require(date > block.timestamp,"You can organise the event for future date");
       require(ticketCount > 0, "Ticket count must be greater than zero");

       events[eventId] = Event(name,date,price,ticketCount,ticketCount);
       eventId++;
   }

   function buyTicket(uint id, uint quantity) external payable {
     require(events[id].date != 0,"event does not exist");
     require(events[id].date >block.timestamp,"event already occured");
     Event storage _event = events[id];
     require(msg.value == _event.price * quantity);
     require(_event.ticketRemain >= quantity);
     _event.ticketRemain -= quantity;
     tickets[msg.sender][id]+= quantity;
   }
}
