// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

contract CrowdFunding {
    address public manager;
    mapping(address => uint256) public contributors;
    uint256 public target;
    uint256 public minContribution;
    uint256 public deadline;
    uint256 public RaisedAmount;
    uint256 public noOfContributors;

    constructor(uint256 _target, uint256 _deadline) {
        target = _target;
        deadline = block.timestamp + _deadline;
        minContribution = 100 wei;
        manager = msg.sender;
    }

    struct Request {
        string description;
        address payable recipient;
        uint256 value;
        bool Completed;
        uint256 noOfVoters;
        mapping(address => uint256) voters;
    }
    mapping(uint256 => Request) public requests;
    uint256 public numRequests;

    function sendEth() public payable {
        require(block.timestamp < deadline);
        require(msg.value >= minContribution);

        if (contributors[msg.sender] == 0) {
            noOfContributors++;
        }
        contributors[msg.sender] += msg.value;
        RaisedAmount += msg.value;
    }

    function GetBalance() public view returns (uint256) {
        return address(this).balance;
    }

    function GetRefund() public {
        require(
            block.timestamp > deadline && RaisedAmount < target,
            "You are not Eligible to get Refund"
        );
        require(contributors[msg.sender] > 0);
        address payable user = payable(msg.sender);
        user.transfer(contributors[msg.sender]);
        contributors[msg.sender] = 0;
    }

    modifier onlyManger() {
        require(msg.sender == manager, "Only manager can calll this function");
        _;
    }

    function createRequests(
        string memory _description,
        address payable _recipient,
        uint256 _value
    ) public onlyManger {
        Request storage newRequest = requests[numRequests];
        numRequests++;
        newRequest.description = _description;
        newRequest.recipient = _recipient;
        newRequest.value = _value;
        newRequest.Completed = false;
        newRequest.noOfVoters = 0;
    }

    function voteRequest(uint _requestNo) public{
        require(contributors[msg.sender] >0,"YOu must be contributor");
        Request storage thisRequest=requests[_requestNo];
        require(thisRequest.voters[msg.sender] == false,"You have already voted");
        thisRequest.voters[msg.sender]=true;
        thisRequest.noOfVoters++;
    }


    function makePayment(uint256 _requestNo) public onlyManger {
        require(RaisedAmount >= target);
        Request storage thisRequest = requests[_requestNo];
        require(
            thisRequest.Completed == false,
            "The request has been completed"
        );
        require(
            thisRequest.noOfVoters > noOfContributors / 2,
            "Majority does not support"
        );
        thisRequest.recipient.transfer(thisRequest.value);
        thisRequest.Completed = true;
    }
}
